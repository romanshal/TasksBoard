// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TasksBoard.Infrastructure.Data.Contexts;

#nullable disable

namespace TasksBoard.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TasksBoardDbContext))]
    [Migration("20250331132101_RemoveStatusesTable")]
    partial class RemoveStatusesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TasksBoard.Domain.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoardId", "AccountId")
                        .IsUnique();

                    b.ToTable("boardmembers", (string)null);
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardMemberPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardPermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoardMemberId");

                    b.HasIndex("BoardPermissionId");

                    b.ToTable("boardmemberspermissions", (string)null);
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardNotice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Rotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("boardnotices", (string)null);
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("boardpermissions", (string)null);
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardMember", b =>
                {
                    b.HasOne("TasksBoard.Domain.Entities.Board", "Board")
                        .WithMany("BoardMembers")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardMemberPermission", b =>
                {
                    b.HasOne("TasksBoard.Domain.Entities.BoardMember", "BoardMember")
                        .WithMany("BoardMemberPermissions")
                        .HasForeignKey("BoardMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksBoard.Domain.Entities.BoardPermission", "BoardPermission")
                        .WithMany("BoardMemberPermissions")
                        .HasForeignKey("BoardPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardMember");

                    b.Navigation("BoardPermission");
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardNotice", b =>
                {
                    b.HasOne("TasksBoard.Domain.Entities.Board", "Board")
                        .WithMany("Notices")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.Board", b =>
                {
                    b.Navigation("BoardMembers");

                    b.Navigation("Notices");
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardMember", b =>
                {
                    b.Navigation("BoardMemberPermissions");
                });

            modelBuilder.Entity("TasksBoard.Domain.Entities.BoardPermission", b =>
                {
                    b.Navigation("BoardMemberPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
